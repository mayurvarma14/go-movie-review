# --- Setup: Create Admin and User ---

# Create an Admin user (replace with a strong password)
POST http://localhost:8080/users/signup
Content-Type: application/json

{
  "username": "adminUser",
  "name": "Admin User",
  "email": "admin@example.com",
  "password": "AdminPassword123!",
  "user_type": "ADMIN"
}

###

# Create a regular User (replace with a strong password)
POST http://localhost:8080/users/signup
Content-Type: application/json

{
  "username": "testUser",
  "name": "Test User",
  "email": "user@example.com",
  "password": "UserPassword123!",
  "user_type": "USER"
}

###

# --- Login (Get Tokens) ---
# Login as Admin (capture the token)
# @name adminLogin
POST http://localhost:8080/users/login
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "AdminPassword123!"
}

# Capture the admin token from the response (using VS Code REST Client syntax)
@adminToken = {{ adminLogin.response.token }}

###
# Login as User (capture the token)
# @name userLogin
POST http://localhost:8080/users/login
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "UserPassword123!"
}

# Capture the user token
@userToken = {{ $userLogin.body.token }}

###


# --- Users ---

# Get all users (Admin only)
GET http://localhost:8080/users
Authorization: Bearer {{ adminLogin.response.token }}

###
# Get all users with pagination (Admin only)
GET http://localhost:8080/users?page=2&limit=2
Authorization: Bearer {{adminToken}}

###

# Get a specific user (Admin can get any user)
GET http://localhost:8080/users/{{ $lastResponse.body.users[0].user_id }}
Authorization: Bearer {{adminToken}}

###

# Attempt to get a user with an invalid ID (should fail - 404)
GET http://localhost:8080/users/invalid-user-id
Authorization: Bearer {{adminToken}}

###

# Attempt to get all users without a token (should fail - 401)
GET http://localhost:8080/users

###

# Attempt to get all users as a regular user (should fail - 403)
GET http://localhost:8080/users
Authorization: Bearer {{userToken}}

###

# --- Genres ---

# Create a genre (Admin only)
POST http://localhost:8080/genres
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Action",
  "genre_id": 1
}

###
# Create another genre (Admin only)
POST http://localhost:8080/genres
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Comedy",
  "genre_id": 2
}

###

# Create a genre with an existing name (should fail - 400)
POST http://localhost:8080/genres
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Action",
  "genre_id": 3
}

###

# Get all genres
GET http://localhost:8080/genres
Authorization: Bearer {{userToken}}

###

# Get a specific genre
GET http://localhost:8080/genres/1
Authorization: Bearer {{userToken}}

###

# Get all genres with pagination
GET http://localhost:8080/genres?page=1&limit=1
Authorization: Bearer {{userToken}}

###

# Update a genre (Admin only)
PUT http://localhost:8080/genres/1
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Action & Adventure",
   "genre_id": 1
}

###

# Attempt to update a genre as a regular user (should fail - 403)
PUT http://localhost:8080/genres/1
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "name": "Action Movies",
    "genre_id": 1
}

###
# Delete a genre (Admin only, after creating it)
DELETE http://localhost:8080/genres/2
Authorization: Bearer {{adminToken}}


###

# --- Movies ---

# Create a movie (Admin only)
POST http://localhost:8080/movies
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Awesome Movie",
  "topic": "A thrilling adventure",
  "genre_id": 1,
  "movie_url": "https://example.com/movie"
}

###

# Create another movie
POST http://localhost:8080/movies
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Funny Movie",
  "topic": "A hilarious comedy",
  "genre_id": 2,
  "movie_url": "https://example.com/funny"
}

###

# Get all movies
GET http://localhost:8080/movies
Authorization: Bearer {{userToken}}

###
# Get all movies with pagination
GET http://localhost:8080/movies?page=1&limit=1
Authorization: Bearer {{userToken}}

###

# Get a specific movie
GET http://localhost:8080/movies/{{ $lastResponse.body.movies[0].movie_id }}
Authorization: Bearer {{userToken}}

###

# Update a movie (Admin only)
PUT http://localhost:8080/movies/{{ $lastResponse.body.movies[0].movie_id }}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Updated Movie Title",
  "topic": "An even more thrilling adventure",
  "genre_id": 1,
  "movie_url": "https://example.com/updated"
}

###

# Search for movies by name
GET http://localhost:8080/movies/search?name=Updated
Authorization: Bearer {{userToken}}

###

# Filter movies by genre
GET http://localhost:8080/movies/filter?genre_id=1
Authorization: Bearer {{userToken}}

###

# Delete a movie (Admin only)
DELETE http://localhost:8080/movies/{{ $lastResponse.body[0].movie_id }}
Authorization: Bearer {{adminToken}}

###

# --- Reviews ---

# Add a review (User)
POST http://localhost:8080/reviews
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "movie_id": 2,
  "review": "This movie was great!"
}

###
#Add a review (Admin)
POST http://localhost:8080/reviews
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "movie_id": 1,
  "review": "This movie was great! by admin"
}
###

# Get reviews for a movie
GET http://localhost:8080/reviews/filter?movie_id=2
Authorization: Bearer {{userToken}}

###

# Get all reviews by a user
GET http://localhost:8080/reviews/user/{{ $lastResponse.body[0].reviewer_id }}
Authorization: Bearer {{userToken}}

###
# Get all reviews by a Admin
GET http://localhost:8080/reviews/user/{{ $lastResponse.body[0].reviewer_id }}
Authorization: Bearer {{adminToken}}
###

# Delete a review (Owner)
DELETE http://localhost:8080/reviews/{{ $lastResponse.body[0].id }}
Authorization: Bearer {{userToken}}

###

# Attempt to delete a review that doesn't exist (404)
DELETE http://localhost:8080/reviews/nonexistentreview
Authorization: Bearer {{userToken}}